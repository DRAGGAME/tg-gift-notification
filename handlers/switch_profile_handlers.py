from typing import Tuple

from aiogram import Router, F
from aiogram.filters.callback_data import CallbackData
from aiogram.types import CallbackQuery

from config import bot
from database.admin_operations import AdminOperations
from database.other_operations import OtherOperation
from functions.get_bot_stars import get_bot_stars
from keyboards.menu_fabric import InlineSwitchProfile, FabricInline


class SwitchProfileHandlers:

    def __init__(self):
        self.bot = bot

        self.router = Router()

        self.database = OtherOperation()
        self.admin_database = AdminOperations()

        self.switch_fabric_keyboard = FabricInline()

        self.register_handlers_switch()

    def register_handlers_switch(self):
        self.router.callback_query.register(self.switch_profile_callback,
                                            InlineSwitchProfile.filter(F.profile_action))

    async def switch_profile_callback(self, callback: CallbackQuery, callback_data: CallbackData):
        bot_stars = await get_bot_stars()
        print(callback_data.profile_action)
        if callback_data.profile_action == "switch_profile":
            number_profile = callback_data.profile_data

            last_profile_data = await self.admin_database.select_profile(int(number_profile))

            type_regime = "—Å –º–µ–Ω–µ–µ —Ü–µ–Ω–Ω—ã—Ö" if last_profile_data[1] == "Up" else "—Å –±–æ–ª–µ–µ —Ü–µ–Ω–Ω—ã—Ö"
            try_profile = last_profile_data[0]
            begin_price = last_profile_data[3]
            end_price = last_profile_data[4]

            gift_count = last_profile_data[2]

            description: str = last_profile_data[6]
            channel_answer: str = last_profile_data[7]

            price: Tuple[int, int] = (begin_price, end_price)

            activation = 'üü¢' if last_profile_data[-4] == number_profile else 'üî¥'


        else:
            try_profile, count_profile = await self.admin_database.insert_profile("")

            if count_profile == 5:
                await callback.answer("–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π", show_alert=True)
                return

            type_regime = "—Å –º–µ–Ω–µ–µ —Ü–µ–Ω–Ω—ã—Ö"

            price: Tuple[int, int] = (0, 1000)
            gift_count: int = 2

            description: str = ""
            channel_answer: str = ""
            activation = ''

        keyboard_profile = await self.switch_fabric_keyboard.inline_profile_menu(price=price, gift_count=gift_count,
                                                                                 id_integer=try_profile, activation=activation)

        await callback.message.edit_text(text="–í—ã –æ—Ç–∫—Ä—ã–ª–∏ –ø–∞–Ω–µ–ª—å –¥–µ–π—Å—Ç–≤–∏–π\n"
                                              "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?\n\n"
                                              "<pre>"
                                              f"–ë–∞–ª–∞–Ω—Å –∑–≤—ë–∑–¥ –≤ –±–æ—Ç–µ(–≤–∞—à–∏): {bot_stars}\n\n"
                                              f"–¢–∏–ø —Ä–µ–∂–∏–º–∞ –ø–æ–∫—É–ø–∫–∏(–Ω–∞—á–∏–Ω–∞—è): {type_regime}\n"
                                              f"–ö–æ–º–º–µ–Ω–∞—Ç—Ä–∏–π –∫ –ø–æ–¥–∞—Ä–∫—É: {description}\n"
                                              f"–ö–∞–Ω–∞–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥–∞—Ä–∫–æ–≤: {channel_answer}"
                                              f"</pre>", reply_markup=keyboard_profile)
        await callback.answer()
