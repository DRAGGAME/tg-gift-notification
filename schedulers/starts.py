import numpy as np
from aiogram.types import Gifts, Gift, Sticker, PhotoSize

from config import bot
from database.admin_operations import AdminOperations
from functions.get_bot_stars import get_bot_stars
from logger import logger


async def start_cmd(pool_sqlbase: AdminOperations, all_tmp_message: list = []):
    sorted_gifts = []
    gifts: Gifts = await bot.get_available_gifts()
    all_premium_gift = {}

    logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–¥–∞—Ä–∫–∏")

    # ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: gifts.gifts ‚Äî —ç—Ç–æ —Ä–µ–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ Gift
    if not hasattr(gifts, "gifts") or not gifts.gifts:
        logger.warning("–°–ø–∏—Å–æ–∫ –ø–æ–¥–∞—Ä–∫–æ–≤ –ø—É—Å—Ç –∏–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –Ω–µ–≤–µ—Ä–Ω–∞.")
        return

    for info_a_gift in gifts.gifts:  # üëà –∑–¥–µ—Å—å –±—ã–ª–æ –ø—Ä–æ—Å—Ç–æ 'for info_a_gift in gifts'
        if hasattr(info_a_gift, "total_count"):
            total_count = getattr(info_a_gift, "total_count", None)

            if total_count is not None:  # –ª–∏–º–∏—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫
                end_count = getattr(info_a_gift, "remaining_count", None)
                price_gift = getattr(info_a_gift, "star_count", None)
                gift_id = getattr(info_a_gift, "id", None)

                logger.info(f"üéÅ –õ–∏–º–∏—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫ –Ω–∞–π–¥–µ–Ω: ID={gift_id}, —Ü–µ–Ω–∞={price_gift}, –≤—Å–µ–≥–æ={total_count}, –æ—Å—Ç–∞–ª–æ—Å—å={end_count}")

                all_premium_gift[gift_id] = (price_gift, total_count, end_count)

    # –µ—Å–ª–∏ –Ω–µ—Ç –ª–∏–º–∏—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤ ‚Äî –ª–æ–≥–∏—Ä—É–µ–º –∏ –≤—ã—Ö–æ–¥–∏–º
    if not all_premium_gift:
        logger.info("–ù–µ—Ç –ª–∏–º–∏—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤ —Å total_count.")
        return

    all_settings = await pool_sqlbase.select_profile_last()
    if not all_settings:
        logger.warning("–ù–µ—Ç –∑–∞–ø–∏—Å–∏, —á—Ç–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.")
        return

    logger.info("–°—É—â–µ—Å—Ç–≤—É–µ—Ç –∑–∞–ø–∏—Å—å –≤ –ë–î. –†–∞–±–æ—Ç–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∞")

    type_regime = all_settings[0][0]
    count_one_gift = all_settings[0][1]
    price_min = all_settings[0][2]
    price_max = all_settings[0][3]
    comment_for_gift = all_settings[0][4]
    channel_for_answer = all_settings[0][5]
    admin_chat_id = all_settings[0][6]

    bot_balance = await get_bot_stars()

    if channel_for_answer == "":
        channel_for_answer = admin_chat_id
    else:
        try:
            channel_for_answer = int(channel_for_answer)
        except ValueError:
            logger.error("–ù–µ–ª—å–∑—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å id")
            return

    if channel_for_answer == "0":
        logger.warning("–ù–µ—Ç –∞–¥–º–∏–Ω–∞")
        return

    # --- –°–û–†–¢–ò–†–û–í–ö–ê –ü–û–î–ê–†–ö–û–í ---

    if type_regime == "Down":
        logger.info("–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Ä–µ–∂–∏–º –ø–æ–∫—É–ø–∫–∏ —Å –≤—ã—Å—à–µ–≥–æ –¥–æ –Ω–∏–∑—à–µ–≥–æ...")
        all_gifts = [(gift_id, values) for gift_id, values in all_premium_gift.items()
                     if price_min <= values[0] <= price_max]

        if all_gifts:
            logger.info("–î–æ–ø. –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–¥–∞—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω–∞.")
            prices = np.array([gift[1][0] for gift in all_gifts])
            remaining_counts = np.array([gift[1][2] if gift[1][2] is not None else np.inf for gift in all_gifts])

            sorted_indices = np.lexsort((remaining_counts, -prices))
            sorted_gifts = [all_gifts[i] for i in sorted_indices]

            for gift in sorted_gifts:
                gift_id = gift[0]
                price = gift[1][0]
                total_count = gift[1][1]
                remaining_count = gift[1][2]
                logger.info(f"[Down] ID: {gift_id}, –¶–µ–Ω–∞: {price}, Total: {total_count}, –û—Å—Ç–∞–ª–æ—Å—å: {remaining_count}")

    else:
        logger.info("–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Ä–µ–∂–∏–º –ø–æ–∫—É–ø–∫–∏ —Å –Ω–∏–∑—à–µ–≥–æ –¥–æ –≤—ã—Å—à–µ–≥–æ...")
        all_gifts = [(gift_id, values) for gift_id, values in all_premium_gift.items()
                     if price_min <= values[0] <= price_max]

        if all_gifts:
            logger.info("–î–æ–ø. –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–¥–∞—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω–∞.")
            prices = np.array([gift[1][0] for gift in all_gifts])
            remaining_counts = np.array([gift[1][2] if gift[1][2] is not None else np.inf for gift in all_gifts])

            sorted_indices = np.lexsort((remaining_counts, prices))
            sorted_gifts = [all_gifts[i] for i in sorted_indices]

            for gift in sorted_gifts:
                gift_id = gift[0]
                price = gift[1][0]
                total_count = gift[1][1]
                remaining_count = gift[1][2]
                logger.info(f"[Up] ID: {gift_id}, –¶–µ–Ω–∞: {price}, Total: {total_count}, –û—Å—Ç–∞–ª–æ—Å—å: {remaining_count}")

    # --- –ü–û–ö–£–ü–ö–ê –ü–û–î–ê–†–ö–û–í ---

    for gift in sorted_gifts:
        gift_id = gift[0]
        gift_price = gift[1][0]

        for _ in range(count_one_gift):
            next_balance = bot_balance - gift_price
            if next_balance >= 0:
                bot_balance -= gift_price
                id_message = await bot.send_gift(
                    gift_id=gift_id,
                    chat_id=int(channel_for_answer),
                    text=comment_for_gift
                )
                all_tmp_message.append(id_message)
            else:
                next_balance = 0
                logger.info(f"–ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –∫—É–ø–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫. –ë–∞–ª–∞–Ω—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–µ–Ω ({bot_balance}‚≠ê).")
                break
